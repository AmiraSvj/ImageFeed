import UIKit

// MARK: - AuthViewControllerDelegate Protocol

protocol AuthViewControllerDelegate: AnyObject {
    func didAuthenticate(_ vc: AuthViewController)
}

final class AuthViewController: UIViewController {
    
    @IBOutlet private var logoImageView: UIImageView!
    @IBOutlet private var loginButton: UIButton!
    
    weak var delegate: AuthViewControllerDelegate?
    private let oauth2Service = OAuth2Service.shared
    private var isFetchingToken = false
    private var isShowingAlert = false
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("üîê AuthViewController viewDidLoad")
        setupUI()
        configureBackButton()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        print("üîê AuthViewController viewWillAppear")
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        print("üîê AuthViewController viewDidAppear")
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }

    private func setupUI() {
        // –§–æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å—Ç–æ—Ä–∏–±–æ—Ä–¥–µ, –Ω–µ –Ω—É–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        // view.backgroundColor = UIColor(named: "YP Black")
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å—Ç–æ—Ä–∏–±–æ—Ä–¥–µ
        logoImageView.contentMode = .scaleAspectFit
        
        // –ö–Ω–æ–ø–∫–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —Å—Ç–æ—Ä–∏–±–æ—Ä–¥–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ target
        loginButton.addTarget(self, action: #selector(didTapLoginButton), for: .touchUpInside)
    }
    
    private func configureBackButton() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–Ω—É—é —Å—Ç—Ä–µ–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        navigationController?.navigationBar.backIndicatorImage = UIImage(named: "nav_back_button")
        navigationController?.navigationBar.backIndicatorTransitionMaskImage = UIImage(named: "nav_back_button")
        
        // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏
        navigationController?.navigationBar.tintColor = UIColor(named: "YP Black")
    }
    
    @IBAction private func didTapLoginButton(_ sender: UIButton) {
        print("üîê Login button tapped")
        
        // –°–æ–∑–¥–∞–µ–º WebViewViewController –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        let webViewController = WebViewViewController()
        webViewController.delegate = self
        
        // –°–æ–∑–¥–∞–µ–º NavigationController –¥–ª—è WebViewViewController
        let navigationController = UINavigationController(rootViewController: webViewController)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ
        present(navigationController, animated: true)
    }
    
    private func showAlert(title: String, message: String) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ view controller –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏ –∞–∫—Ç–∏–≤–µ–Ω
        guard isViewLoaded && view.window != nil && !isBeingDismissed && !isMovingFromParent else {
            print("View controller not in hierarchy or being dismissed, skipping alert: \(title)")
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–ª–µ—Ä—Ç
        if isShowingAlert || presentedViewController != nil {
            print("Alert already showing, skipping: \(title) - \(message)")
            return
        }
        
        isShowingAlert = true
        
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default) { [weak self] _ in
            self?.isShowingAlert = false
        })
        
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
            guard self.isViewLoaded && self.view.window != nil && !self.isBeingDismissed && !self.isMovingFromParent else {
                print("View controller no longer valid before alert presentation, skipping")
                self.isShowingAlert = false
                return
            }
            
            self.present(alert, animated: true)
        }
    }
    
    // MARK: - Private Methods
    
    /// –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
    private func parseErrorMessage(from data: Data?) -> String? {
        guard let data = data else { return nil }
        
        if let responseString = String(data: data, encoding: .utf8) {
            if responseString.contains("redirect_uri is not valid") {
                return "–ù–µ–≤–µ—Ä–Ω—ã–π redirect URI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Unsplash."
            } else if responseString.contains("requested scope is not valid") {
                return "–ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (Permissions). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Unsplash."
            } else if responseString.contains("code has already been used") {
                return "–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ."
            } else if responseString.contains("client_id is invalid") {
                return "–ù–µ–≤–µ—Ä–Ω—ã–π Access Key. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Unsplash."
            } else if responseString.contains("client_secret is invalid") {
                return "–ù–µ–≤–µ—Ä–Ω—ã–π Secret Key. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Unsplash."
            } else if responseString.contains("invalid_client") {
                return "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Access Key –∏ Secret Key."
            } else {
                return responseString
            }
        }
        
        return nil
    }
    

    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private func saveUserData() {
        print("üíæ User data saved successfully")
        print("   - Token stored in OAuth2TokenStorage by OAuth2Service")
        print("   - Access key: \(String(Constants.accessKey.prefix(10)))...")
        print("   - Scope: \(Constants.accessScope)")
    }
}

// MARK: - WebViewViewControllerDelegate
extension AuthViewController: WebViewViewControllerDelegate {
    func webViewViewController(_ vc: WebViewViewController, didAuthenticateWithCode code: String) {
        print("‚úÖ Authentication successful with code: \(code)")
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebView
        vc.dismiss(animated: true) {
            // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—è AuthViewController
            self.switchToMainScreen()
        }
    }
    
    func webViewViewControllerDidCancel(_ vc: WebViewViewController) {
        print("‚ùå Authentication cancelled")
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebView
        vc.dismiss(animated: true)
    }
    
    private func switchToMainScreen() {
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
        guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
              let window = windowScene.windows.first else {
            print("‚ùå Failed to get window")
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º TabBarController
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        guard let tabBarController = storyboard.instantiateViewController(withIdentifier: "TabBarViewController") as? UITabBarController else {
            print("‚ùå Failed to create TabBarController")
            return
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
        window.rootViewController = tabBarController
        print("üéâ Switched to main screen")
    }
} 